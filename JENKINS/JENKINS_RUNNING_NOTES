==================================================================
25AUG25--> DAY - 0 

Gitbash download & install
------------------------
lINUX foundation:
pwd 
touch file1 file2 
mkdir dir1 dir2 dir3 
rm -rf dir1 dir2 file1 

view: 
ls 
ll 
ls -rlth 
ls -la 

cd dir1/dir2/dir3
cd ..
cat fname 
history
=================================
GIT HUB ACCOUNT Creation
=================================

AWS FREE TIER ACCOUNT creation: 

https://youtu.be/65L4yzK9NRA?si=fe8Fs2btyacKk5se

==============================
26 AUG25--> DAY - 1

MORE LINUX COMMNADS :

cd dir1/dir2/dir3/
cat dir1/dir2/dir3/devops 

===========

JENKINS: open-source automation server for Continuous Integration (CI) and Continuous Delivery (CD).

It’s written in Java and has a huge plugin ecosystem that lets you integrate with almost any tool in the DevOps pipeline

    Open-Source and Cost-Free
    Extensive Plugin Ecosystem
    Platform Independent
    Pipeline as Code (Jenkinsfile)
    Strong Community and Support
    High Scalability
    Versatile and Flexible
    

sudo su - 
hostnamectl set-hostname jenkins 

cd dir1/dir2/dir3/devops 
cd ../../..

cat dir1/dir2/dir3/devops 

========== jenkins setup:

mount -o remount,size=4G /tmp
sudo yum update –y
sudo wget -O /etc/yum.repos.d/jenkins.repo  https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo yum install java-21-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins

===========

yum install git -y 
yum install java -y 
yum install jenkins -y 
yum install docker  -y 
-------------------------------
systemctl start/stop/enablle jenkins 

============================================================

DAY 2 - 28 AUG 25 

clear 


ctrl + c 

================

7396627149 


https://github.com/devopstraininghub/

https://github.com/devopstraininghub/b16projectrepo.git


1 SEP , 8: 10 PM 



10  20 1 9 * 

* * *  *  * 




http://ec2-54-242-233-6.compute-1.amazonaws.com:8080/job/job2/build?token=abc123

or 


/buildWithParameters?token=TOKEN_NAM



clear /// ctrl + L 

===============================

date: 2 sep 25

wget <downloadlink> 
wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.108/bin/apache-tomcat-9.0.108.tar.gz


cd /opt
wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.108/bin/apache-tomcat-9.0.108.tar.gz
ll



tar -xvf apache-tomcat-9.0.108.tar.gz


=================
vi/vim fname


    esc ---i   (insert ) 
	
	 ---
	 data
	 ----
	 
	 esc : wq!
	 esc : w
	  esc : q
	 

==========================================
tomcat-users.xml:


<tomcat-users>
<role rolename="manager-gui"/>
<user username="tomcat" password="tomcat" roles="manager-gui, manager-script, manager-status"/>
</tomcat-users>
===========================================

DATE: 3 SEP 2025 

1. MC-APP ACCESS 
   
   - SAME BROWSER / SAME ACCOUNT
  
2. TOMORROW HOLIDAY (4 SEP 2025) 
   
   
------------------------------

Practice path --> /opt 

Creating & Editing a file in LINUX OS : 

touch fname 
=================================================
vim fname
--------------------
esc -- i 

 INSERT MODE ( data ) 
 
esc: w 
esc: q 
esc: wq! 
=================================================
cat fname 

tail -5 fname 


---------------------------------
How to download content on Linux ?

wget <link> 

---------------------------------
How to extract compressed content from Linux ? (tar.gz ) 

tar -xvf <filename.tar.gz> 

--------------------------------



--------------------------------
how to view file ?

cat fname
tail fname 

--------------------------------

TOMCAT SETUP: 

tomcat-users.xml:

<tomcat-users>
<role rolename="manager-gui"/>
<user username="tomcat" password="tomcat" roles="manager-gui, manager-script, manager-status"/>
</tomcat-users>


--------------------------------
JENKINS SETUP:

mount -o remount,size=4G /tmp
sudo yum update –y
sudo wget -O /etc/yum.repos.d/jenkins.repo  https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo yum install java-21-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins




--------------------------------
AUTO MATING CI CD USING JENKINS & TOMCAT :


PLUGIN : DEPLOY TO CONTAINER

OUR PROJECT GIT ACCOUNT: https://github.com/devopstraininghub/

REPO: https://github.com/devopstraininghub/mindcircuit16d.git

--------------------------------

DATE: 5 SEP 2025


DATE:  5 SEP 25
AGENDA:
1. GIT HUB RUNNING NOTES LINK 
2. APP ACCES
3. JENKINS RESTARTS
4. JENKINS UPGRADE  
5. MASTER-SLAVE ARCH
==================================

LINUX COMMANDS : 

ps -ef |grep jenkins 

==============
Jenkins upgrade :

   ps -ef | grep jenkins
   22  cd /usr/share/java
   23  ll
   26  systemctl stop jenkins
   24  cp -rp jenkins.war jenkins.war_bkp_5sep2025
   25  ll
   27  rm -rf jenkins.war
   28  ll
   29  wget https://get.jenkins.io/war/2.526/jenkins.war
   30  ll
   31  systemctl start jenkins


=======================

-------
wget https://get.jenkins.io/war/2.526/jenkins.war


systemctl start Jenkins 


===========================

JENKINS MASTER SLAVE DISTRIBUTED ARCH: 


SLAVE NODE 
CONNECT ( FROM MANAGE JENKINS -ADD NODES ) 



========================================================

===================
DATE: 10 SEP 25


vim jenkins_setup.sh

mount -o remount,size=4G /tmp
sudo yum update –y
sudo wget -O /etc/yum.repos.d/jenkins.repo  https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
sudo yum upgrade
sudo yum install java-21-amazon-corretto -y
sudo yum install jenkins -y
sudo systemctl enable jenkins
sudo systemctl start jenkins

======================================================================
tomcat_setup.sh

#SCRIPT FOR TOMCAT
 
 
#!/bin/bash

sudo yum install java -y
cd /opt
sudo wget https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.109/bin/apache-tomcat-9.0.109.tar.gz
sudo tar -xvf /opt/apache-tomcat-9.0.109.tar.gz

cd /opt/apache-tomcat-9.0.109/webapps/manager/META-INF
sudo sed -i 's/"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1"/".*"/g' context.xml

cd /opt/apache-tomcat-9.0.109/conf
sudo mv tomcat-users.xml tomcat-users_bkup_11sep25.xml
sudo touch tomcat-users.xml
sudo echo '<?xml version="1.0" encoding="utf-8"?>
        <tomcat-users>
        <role rolename="manager-gui"/>
        <user username="tomcat" password="tomcat" roles="manager-gui, manager-script, manager-status"/>
        </tomcat-users>' > tomcat-users.xml

cd /opt/apache-tomcat-9.0.109/conf/
sudo sed -i 's/Connector port="8080"/Connector port="8081"/g' server.xml
sudo /opt/apache-tomcat-9.0.109/bin/startup.sh



===================================================================

GIT BASICS:

git clone <url> 




======================================================================
============
JAVA  INSTALLATION widnows 

JAVA_HOME:    C:\Program Files\Java\jdk-1.8

PATH : C:\Program Files\Java\jdk-1.8\bin

============
MVN INSTALLATION ON WINDOWS 
M2_HOME  
C:\Users\Madhu Kiran\Desktop\BATCH16-D\apache-maven-3.9.11-bin\apache-maven-3.9.11

PATH: 
C:\Users\Madhu Kiran\Desktop\BATCH16-D\apache-maven-3.9.11-bin\apache-maven-3.9.11\bin


MAVEN :

APACHE MAVEN 

JAVA 
BUILD TOOL + PM TOOL 
POM.XML 
=======

JAVA EVOLUTION: 



===========================================================================

DATE: 11 SEP 25: 



winscp
scp command 

scp src dest 

scp -i b16dkey.pem testfile.txt  ec2-user@ec2-54-235-24-21.compute-1.amazonaws.com:/tmp




Classic problem in SDLC

Custom java installation on linux os


JAVA_HOME :  /opt/jdk1.8.0_461
path : /opt/jdk1.8.0_461/bin

vim /etc/profile.d/java.sh

export JAVA_HOME=/opt/jdk1.8.0_461
export PATH=${JAVA_HOME}/bin:${PATH}


source etc/profile.d/java.sh

=====================================================

maven repositories
maven java dependencies
maven life cycle

===========================

DT : 12 SEP 2025


MAVEN repositories

 - LOCAL REPO   ---->   user home --> .m2 
 - CENTRAL repos  ---> https://repo1.maven.org/maven2/
 - REMOTE REPO  ---> HTTPS://XYZ..


================
MVN IS ALSO A PROJECT MANAGEMENT TOOL 

HOW TO generate a new project skeleton (template).

mvn archetype:generate


======================================================

pom.xml (

POM = Project Object Model

It’s the configuration file used by Apache Maven (and tools like Jenkins, GitHub Actions, GitLab CI/CD) to manage:

     Project metadata (name, version, packaging)     
     Dependencies (libraries, frameworks)     
     Build lifecycle (compile, test, package, deploy)     
     Plugins (for testing, reporting, deployments)     
     Repositories (where to fetch artifacts)

pom.xml is the single source of truth for building, testing, packaging, and deploying a Java application, making it essential for CI/CD pipelines, automation, and reliable deployments.


<groupId>com.example</groupId>     <!-- Organization/domain -->
<artifactId>myapp</artifactId>     <!-- Project name -->
<version>1.0.0</version>           <!-- Project version -->
<packaging>jar</packaging>         <!-- Type: jar, war, pom -->


========
SAMPLE POM.XML:

         

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Project Coordinates -->
    <groupId>com.example</groupId>
    <artifactId>myapp</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <!-- Metadata -->
    <name>My Application</name>
    <description>Sample project</description>

    <!-- Dependencies -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>3.2.0</version>
        </dependency>
		
		
	 <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
          <artifactId>selenium-java</artifactId>
          <version>4.24.0</version>
        </dependency>
    </dependencies>

    <!-- Build Config -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>





===========

MAVEN LIFE CYCE 

mvn clean install 


https://www.linkedin.com/posts/madhukiran-gorekar_maven-buildlifecycle-devops-activity-7247579291457093633-GBIP?utm_source=social_share_send&utm_medium=member_desktop_web&rcm=ACoAAAOaZKYBgHqqOuWNEMewLeHAlTGV2Ykkh5A


============================


DATE: 15 SEP 25

JENKINS SLOWNESS 
JENKINS VIEWS


GITHUB ACCOUNT & FORK 
JENKINS - GITHUB WEBHOOKS Integration






'http://54.159.26.167:8090/github-webhook'
cotent type: application/json


triggers {
        githubPush()
    }
	
----------
===========================================


DATE: 

16 SEP 2025

Topics: 
1. SECURITY GROUP ( allow all traffic ) 
2. WHY FEW PEOPLE ARE NOT ABLE TO CREATE FREE TIER ACCOUNT ?
       Already Used Free Tier - If the person has already created a free-tier account with the same:
       Email
       Phone number
       Credit card
  → They cannot register again for free credits.


3. PARALLEL STAGE JOBS 

In Jenkins, you can run multiple jobs in parallel within a single pipeline by using the parallel directive inside a stage. This is particularly useful when you want to speed up builds (e.g., running tests on multiple platforms, or executing independent tasks simultaneously).



pipeline {

    agent any
    stages {
	
        stage('CLONE SCM') {
            steps {
                echo 'This stage clones SC from GIT repo'				
				git branch: 'main', url: 'https://github.com/devopstraininghub/mindcircuit16d.git'
            }
        }
		
        stage('Build Artifact') {
            steps {
                echo 'This stage builds the code using maven'
				sh 'mvn clean install'
				
            }
        }

            stage('Deploy to Multiple Environments') {
            parallel {
                stage('Lab') {
                    steps {
                        echo 'DEPLOYING ON LAB...'
                       // deploying on LAB TOMCAT WEB SERVER 
                   }
                }
                stage('sbox') {
                    steps {
                        echo 'DEPLOYING ON sbox...'
                       // deploying on SBOX  TOMCAT WEB SERVER 
                   }
                    }
                
                stage('UAT') {
                    steps {
                        echo 'DEPLOYING ON UAT...'
                      // deploying on UAT  TOMCAT WEB SERVER 
                   }
                    }
                }
            }

        }
    }
   


=====================

4. BUILD SHOUD CONTINUE EVEN IF A STAGE FAILS IN PIPELINE : (USING try & catch blocks) :


pipeline {

    agent any
    stages {
          stage('CLONE GITHUB CODE') {
            steps {
                script {
                    try {
                        echo 'In this stage code will be cloned'
                        git branch: 'master', url: 'https://github.com/devopstraininghub/mindcircuit17d.git'
                    } catch (Exception e) {
                        echo "Stage 1 failed: ${e.message}"
                    }
                }
            }
        }
		
        stage('Build Artifact') {
            steps {
                echo 'This stage builds the code using maven'
			  // sh 'mvn clean install' 
				
            }
        }

      

        }
    }
	
	
	==============================================================



pipeline {
    agent any

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('CLONE GITHUB CODE') {
            steps {
                script {
                    try {
                        echo 'In this stage code will be cloned'
                        git branch: 'master', url: 'https://github.com/devopstraininghub/mindcircuit16d.git'
                    } catch (Exception e) {
                        echo "Stage 1 failed: ${e.message}"
                    }
                }
            }
        }

        stage('BUILDING THE CODE') {
            steps {
                script {
                    try {
                        echo 'In this stage code will be built and mvn artifact will be generated'
                        sh 'mvn clean install'
                    } catch (Exception e) {
                        echo "Stage 2 failed: ${e.message}"
                    }
                }
            }
        }

        stage('DEPLOY') {
            steps {
                script {
                    try {
                        echo 'In this stage .war artifact will be deployed on to Tomcat'
                        deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://54.91.227.106:8081/')], 
                               contextPath: 'devops-app', 
                               war: '**/*.war'
                    } catch (Exception e) {
                        echo "Stage 3 failed: ${e.message}"
                    }
                }
            }
        }
    }
}


******************************** or ***********************************

pipeline {
    agent any

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('CLONE GITHUB CODE') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'In this stage code will be cloned'
                    git branch: 'main', url: 'https://github.com/devopstraininghub/mindcircuit15d.git'
                }
            }
        }

        stage('BUILDING THE CODE') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'In this stage code will be built and mvn artifact will be generated'
                    sh 'mvn clean install'
                }
            }
        }

        stage('DEPLOY') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    echo 'In this stage .war artifact will be deployed on to Tomcat'
                    deploy adapters: [
                        tomcat9(credentialsId: 'tomcat', path: '', url: 'http://54.91.227.106:8081/')
                    ],
                    contextPath: 'devops-app',
                    war: '**/*.war'
                }
            }
        }
    }
}

===================================================================================================
5. PIPELINE WITH ENVIRONEMNT VARIABLES

   Environment variables are key–value pairs that store information which can be used by processes, scripts, or applications.



    export JAVA_HOME=/usr/lib/jvm/java-11
    export PATH=$JAVA_HOME/bin:$PATH



Environment Variables in Jenkins

In Jenkins environment variables are:
    
    Values you can define globally, per-job, or inside a pipeline.
    
    Used to pass information between stages, steps, and scripts.
    

    Built-in variables  vs Custom environment variables
    
    BUILD_NUMBER → current build number
    
    WORKSPACE → path to job’s workspace
    
    JOB_NAME → name of the job
    
========================

pipeline {
    agent any

    stages {
        stage('Show Built-in Env Variables') {
            steps {
                echo "Job Name: $JOB_NAME"          // name of the Jenkins job
                echo "Build Number: ${env.BUILD_NUMBER}" // auto-incremented build number
                echo "Workspace: ${env.WORKSPACE}"       // directory where code is checked out
                echo "Build ID: ${env.BUILD_ID}"         // unique ID for this build
                echo "Node Name: ${env.NODE_NAME}"       // Jenkins agent name
                echo "Executor Number: ${env.EXECUTOR_NUMBER}" // executor slot running this job
         //       echo "Git Branch: ${env.GIT_BRANCH}"     // available if job is connected to Git
            }
        }

        stage('Run Script with Env Vars') {
            steps {
                sh '''
                    echo "We are running job: $JOB_NAME"
                    echo "This is build number: $BUILD_NUMBER"
                    echo "Workspace is: $WORKSPACE"
                '''
            }
        }
    }
}

===============================================================================	
	

pipeline {
    agent any
    
    environment {
        GIT_BRANCH   = 'main'
        GIT_URL      = 'https://github.com/devopstraininghub/mindcircuit16d.git'
        MAVEN_CMD    = 'mvn clean install'
        TOMCAT_URL   = 'http://ec2-54-196-169-213.compute-1.amazonaws.com:8081/'
        TOMCAT_CRED  = 'tomcat'
        CONTEXT_PATH = 'MC-APP'
        WAR_FILE     = '**/*.war'
    }
    
    stages {
    
        stage('CLONE SCM') {
            steps {
                echo "Job: ${JOB_NAME}, Build Number: ${BUILD_NUMBER}, Workspace: ${WORKSPACE}"
                echo "Cloning from ${GIT_URL}, branch: ${GIT_BRANCH}"
                
                git branch: "${GIT_BRANCH}", url: "${GIT_URL}"
            }
        }
		
        stage('Build Artifact') {
            steps {
                echo "Build ID: ${BUILD_ID}, Executing Maven in workspace ${WORKSPACE}"
                sh "${MAVEN_CMD}"
            }
        }
		
        stage('Deploy to Tomcat') {
            steps {
                echo "Deploying ${WAR_FILE} from job ${JOB_NAME} build #${BUILD_NUMBER}"
                echo "Target Tomcat: ${TOMCAT_URL}, Context Path: ${CONTEXT_PATH}"
                
                deploy adapters: [tomcat9(
                    alternativeDeploymentContext: '', 
                    credentialsId: "${TOMCAT_CRED}", 
                    path: '', 
                    url: "${TOMCAT_URL}"
                )], contextPath: "${CONTEXT_PATH}", war: "${WAR_FILE}"
            }
        }		
    }
    
    post {
        success {
            echo "✅ Build ${BUILD_NUMBER} of job ${JOB_NAME} completed successfully!"
        }
        failure {
            echo "❌ Build ${BUILD_NUMBER} of job ${JOB_NAME} failed. Check console logs in ${BUILD_URL}"
        }
    }
}








==================================================================

NEXUS ARTIFACTORY :



DATE: 17 SEP 25


LINUX COMMANDS :


chown 
chkconfig ---> systemctl enable 

version id --> 8.2.0 -->>> going to be released
version id --> 8.2.0-SNAPSHOT -->>> under development / on going implementation



NEXUS :

BY sonatye 
opensource 
java based software 

blog to follow : https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/


============
    1  sudo yum update -y
    2  sudo yum install wget -y
    3  sudo yum install java-17-openjdk -y
    4  sudo yum install java-17 -y
    5  mkdir /app
    6  cd /app/
    7  sudo wget https://download.sonatype.com/nexus/3/latest-unix.tar.gz
    8  wget https://download.sonatype.com/nexus/3/nexus-3.84.0-03-linux-x86_64.tar.gz
    9  ll
   10  tar -xvf nexus-3.84.0-03-linux-x86_64.tar.gz
   11  ll
   12  mv nexus-3.84.0-03 nexus
   13  ll
   14  adduser nexus
   15  cat /etc/passwd
   16  ll
   17  chown -R nexus:nexus nexus
   18  ll
   19  chown -R nexus:nexus sonatype-work/
   20  ll
   21  ll nexus
   22  ll sonatype-work/
   23  ll
   24  cd nexus/
   25  ll
   26  cd bin/
   27  ll
   28  sudo vi  /app/nexus/bin/nexus.rc
   29  ll
   30  cat nexus.vmoptions
   31  ll
   32  sudo vi /etc/systemd/system/nexus.service
   33  sudo chkconfig nexus on
   34  systemctl start nexus
   35  systemctl status nexus
   36  cat app/sonatype-work/nexus3/admin.password
   37  cat /app/sonatype-work/nexus3/admin.password
   38  history

==============
in POM.XML : 

	<distributionManagement>
		 <snapshotRepository>
		    <id>NexusRepo</id>
		    <url>http://34.201.119.102:8081/repository/batch16d-repo-snapshot/</url>
		 </snapshotRepository>
		
		<repository>
		    <id>NexusRepo</id>
		    <url>http://34.201.119.102:8081/repository/batch16d-repo-release/</url>
		</repository>
  	</distributionManagement>



========================================

IN JENKINS/MAVEN SERVER --> /etc/maven/setting.xml
ADD the content 

    <server>
      <id>NexusRepo</id>
      <username>admin</username>
      <password>batch16d@123</password>
    </server>






