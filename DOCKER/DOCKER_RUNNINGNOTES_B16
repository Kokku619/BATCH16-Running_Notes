
date : 19 sep 2025

Docker :
Docker is a containerization tool that allows you to package an application along with all its dependencies (code, libraries, runtime, system tools) into a single unit.

It helps create, deploy, and run applications consistently across different environments.

Docker is lightweight, portable, and open-source.

======================
What is a Docker Image?

A Docker image is a read-only template used to create containers.

It includes: 
   Application code   
   Runtime (e.g., Java, Python)   
   Libraries and dependencies   
   Configuration files
   
Images are static and can be stored in registries (like Docker Hub / ECR / GCR ..) 
======================
What is a Docker Container?

     A Docker container is a running instance of a Docker image.     
     It is lightweight and isolated, but shares the host OS kernel.     
     A container includes everything needed to run the application, providing consistency across environments.
	 
======================	 
	 
4. Docker Architecture

Docker architecture consists of these key components:

      Docker Client – Command-line interface to communicate with Docker.
      
      Docker Daemon – Background service that manages containers and images.
      
      Docker Images – Read-only templates to create containers.
      
      Docker Containers – Running instances of images.
      
      Docker Registry – Stores and distributes Docker images (e.g., Docker Hub).


====================================


docker -v  
docker --version  
docker info  
docker images  
docker pull <iname>  
docker run amazonlinx -- container will be created and exited immediately
  
docker run -it <iid/imagename> --- enters into container  
docker run -it --name <contname> <iid/imagename> 
exit  --> container gets stoped 
ctrl + p + q 
============



docker ps  -a 
docker ps ( only running containers )  
docker start cid/cname
docker stop cid/cname
docker pause cid/cname
docker unpause cid/cname

docker rm cid/cname

docker rm -f cid/cname

=============================================

docker attach cid --> 
This command attaches your terminal to the running container’s primary process (PID 1). 
It connects you to the standard input (STDIN), output (STDOUT), and error (STDERR) 
It doesn’t start a new process or give you a shell by default. 


docker exec -it <cid/cname> /bin/bash  

This command executes a new process (/bin/bash, a shell) inside the running container and 
connects your terminal to it interactively 
Starts a new shell session inside the container, independent of the main process. 


====================================================
docker rmi iid  
docker rmi iid  --force  
docker rmi -f iid   

========================================
docker run -itd <iid/imagename>  ----------------- 
docker commit <cid> 
docker tag iid <reponame>:<tag> 

docekr rm $(docker ps -aq)  
docker rmi $(docker images -q)  ------ 

======================

DATE : 22 SEP 25 (MONDAY) 


docker hub account creation  
 
creation of Image repo in your DH account  
 
docker image push to  - Image repo in your DH account  


docker push devopshubg333/batch16d:tagname


docker pull devopshubg333/batch16d:gitjava


   docker login  --> usernaem & password
   26  docker images
   27  docker push amazonlinux:gitjava
   28  docker tag efc3ea850076 devopshubg333/batch16d:gitjava
   29  docker images
   30  docker push devopshubg333/batch16d:gitjava

 
======================================= 
A SMPLE HTTPD WEB APPLICATION SET UP :

MANULLY :

httpd : 80 
yum install httpd -y 
systemctl start httpd 
cd /var/www/html  ----> index.html 
IP:80 
====================

DOCKERIZING APPLICATION: 
 
port maping /port forwards  
 
docker run -it --name <contname> -p HP:CP amazonlinux  
 
docker run -it --name fb_httpd_cont2 -p 8081:80 amazonlinux 
 
yum install httpd -y  
cd /usr/sbin/ 
./httpd  
cd /var/www/html/ 
yum install vim -y  
vim index.html  
==============================================
docker cp src dest  
docker cp index.html fb_httpd_cont2:/var/www/html/index.html 
Successfully copied 77.8kB to fb_httpd_cont2:/var/www/html/index.html 

======================

1  docker -v
    2  docker --version
    3  systemctl status docker
    4  systemctl enable docker
    5  docker images
    6  docker ps -a
    7  docker ps -qa
    8  docker rm -f $(docker ps -qa)
    9  docker rmi $(docker images -q)
   10  docker images
   11  docker run --name cont1 amazonlix
   12  docker run --name cont1 amazonlinux
   13  docker ps -a
   14  docker run -it --name cont1 amazonlinux
   15  docker run -it --name cont2 amazonlinux
   16  docker ps -a
   17  docker ps
   18  docker exec -it cont2 /bin/bash
   19  docker ps
   20  docker commit cont2
   21  docker images
   22  docker tag efc3ea850076 amazonlinux:gitjava
   23  docker images
   24  docker push amazonlinux:gitjava
   25  docker login
   26  docker images
   27  docker push amazonlinux:gitjava
   28  docker tag efc3ea850076 devopshubg333/batch16d:gitjava
   29  docker images
   30  docker push devopshubg333/batch16d:gitjava
   31  history
   32  docker ps
   33  docker run -itd --name cont3 amazonlinux
   34  docker ps
   35  docker run -itd --name cont4 amazonlinux sleep 15
   36  docker ps -a
   37  docker run -it --name cont5 amazonlinux sleep 15
   38  docker ps -a
   39  docker run -it --name cont5 amazonlinux ping www.google.com
   40  docker run -it --name cont6 amazonlinux ping www.google.com
   41  docker ps -a
   42  yum install httpd -y
   43  systemctl start httpd
   44  cd /var/www/html/
   45  ll
   46  vim index.html
   47  cat index.html
   48  vim index.html
   49  l
   50  LL
   51  ll
   52  docker ps -a
   53  docker rm -f (docker ps -aq)
   54  docker rm -f $(docker ps -aq)
   55  ll
   56  cd /
   57  cd /opt/
   58  ll
   59  docker run -it --name fb_cont amazonlinux
   60  docker ps
   61  docker run -it --name fb_cont2 -p 8082:80  amazonlinux
   62  docker ps
   63  ll
   64  touch index.html
   65  ll
   66  vim index.html
   67  ll
   68  docker ps
   69  docker cp index.html fb_cont2:/var/www/html/index.html
   70  docker commit fb_cont2
   71  docker images
   72  docker tag 05c62ead1c6d devopshubg333/batch16d:httpd_fb
   73  docker images
   74  docker push devopshubg333/batch16d:httpd_fb
   75  docker rm -f $(docker ps -qa)
   76  docker rmi $(docker images)
   77  docker images
   78  docker rmi $(docker images -q)
   79  docker rmi $(docker images -q) --force
   80  docker images
   81  docker ps -aq
   82  ll
   83  rm -rf *
   84  ll
   85  docker pull devopshubg333/batch16d:httpd_fb
   86  docker images
   87  docker run -itd --name fbcont_b16d -p 8090:80 devopshubg333/batch16d:httpd_fb
   88  docker ps -a
   89  docker exec fbcont_b16d /bin/bash
   90  docker exec -it fbcont_b16d /bin/bash
   91  history
================================================================================================================================
=================================
23 SEP 25 :



docker history imagename:tag


docker logs cid 
docker logs -f cont-id
docker logs --tail 100 cont-id
docker logs --since 10m cont-id

------------------

docker home path --> /var/lib/docker 
---------

Docker Container - ephemeral nature : 

Docker containers are ephemeral by design, meaning they are temporary and stateless. Once a container stops or is deleted, any data or changes made inside it during its runtime are lost unless explicitly preserved 

DOCKER VOLUMES  
docker volume create my_volume 
docker run -d -v my_volume:/container/path   my_image 


Usage:  docker volume COMMAND

Manage volumes

Commands:
  create      Create a volume
  inspect     Display detailed information on one or more volumes
  ls          List volumes
  prune       Remove unused local volumes
  rm          Remove one or more volumes
  update      Update a volume (cluster volumes only)

--------------------------------- 
BIND MOUNTS  
docker run -v /host/path:/container/path my-image 
docker run -it --name cont2 -v /opt:/opt/logs iname 

============================================

24 sep 25:


=============================================== 
Docker file :  
how to build --? 
docker build -t <devopshubg333/batch16d:tag> . ---------------------------------------- 


FROM amazonlinux:latest
RUN yum install httpd -y
COPY index.html /var/www/html/index.html
CMD ["/usr/sbin/httpd", "-DFOREGROUND"]
EXPOSE 80



----------------- 
docker run -it -p 8090:80 --name cont1 iid  


docker 
========================================================================= 
Dockerizing sample python web-application : 
====== 
Code : /opt/app.py 

import os
from flask import Flask

app = Flask(__name__)

@app.route("/")
def main():
    return "Welcome to Batch16d!"

@app.route("/how are you")
def hello():
    return "I am good, how about you?"

if __name__ == "__main__":
    app.run()





============== 
Commands : 


yum update -y 
yum install python3 python3-pip pip -y 
pip install flask 
FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080 


Dockerfile

FROM amazonlinux:latest 
LABEL maintainer="MADHU KIRAN <devopstraininghub@gmail.com>" 
RUN yum update -y 
RUN yum install python3 python3-pip pip -y 
RUN pip install flask
COPY app.py /opt/python_webapp/app.py
CMD FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
EXPOSE 8080



======================================= 
docker system prune 
docker container prune 
docker image prune 
docker volume prune  

===============================
 systemctl status docker
   16  docker images
   17  docker ps -a
   18  cd /opt/
   19  ll
   20  mkdir httpd_fb_app
   21  ll
   22  cd httpd_fb_app/
   23  ll
   24  vim Dockerfile
   25  cat Dockerfile
   26  docker build -t testimg:v1 -f Dockerfile .
   27  vim Dockerfile
   28  docker build -t testimg:v1 -f Dockerfile .
   29  ll
   30  vim index.html
   31  docker build -t testimg:v1 -f Dockerfile .
   32  docker images
   33  ll
   34  docker run -it --name fb_ct1 -p 8081:80 testimg:v1
   35  docekr ps -a
   36  docker ps -a
   37  top
   38  ll
   39  vim Dockerfile
   40  docker build -t testimg:v1 -f Dockerfile .
   41  docker images
   42  docker run -it --name fb_ct2 -p 8081:80 testimg:v1
   43  ll
   44  vim index.html
   45  docker build -t devopshubg333/batch16d:fb_httpd -f Dockerfile .
   46  docker images
   47  docker run -itd --name fbcont -p 8083:80 devopshubg333/batch16d:fb_httpd
   48  docker login
   49  docker push devopshubg333/batch16d:fb_http
   50  docker push devopshubg333/batch16d:fb_httpd
   51  ll
   52  cat Dockerfile
   53  rm -rf *
   54  ll
   55  docker images
   56  docker rm -f $(docker ps -aq)
   57  docker rmi -f $(docker images -q)
   58  docker images
   59  ll
   60  docker run -itd -p 8089:80 --name fb devopshubg333/batch16d:fb_httpd
   61  docker images
   62  docker histroy
   63  docker histroy devopshubg333/batch16d:fb_httpd
   64  docker history devopshubg333/batch16d:fb_httpd
   65  ll
   66  cd ../
   67  ll
   68  mkdir python_webapp
   69  ll
   70  cd python_webapp/
   71  ll
   72  vim app.py
   73  yum update -y
   74  yum install python3 python3-pip pip -y
   75  pip install flask
   76  pwd
   77  FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
   78  vim app.py
   79  FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
   80  ll
   81  vim app.py
   82  FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
   83  vim app.py
   84  FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
   85  ll
   86  rm -rf __pycache__/
   87  ll
   88  vim Dockerfile
   89  docker build -t pythonimg:v1 -f Dockerfile .
   90  docker images
   91  docker run -itd --name pycont1 -p 8090:8080 pythonimg:v1
   92  docker run -it --name pycont1 -p 8091:8080 pythonimg:v1
   93  docker run -it --name pycon2 -p 8091:8080 pythonimg:v1
   94  ll
   95  vim Dockerfile
   96  docker build -t pythonimg:v1 -f Dockerfile .
   97  docker images
   98  docker run -it --name pycon3 -p 8091:8080 pythonimg:v1
   99  docker images
  100  ll
  101  docker tag 45bd840bcad3  devopshubg333/batch16d:pythonimg
  102  docker images
  103  docker push devopshubg333/batch16d:pythonimg
  104  docker images
  105  docker hisotry 45bd840bcad3
  106  docker history 45bd840bcad3
  107  docker images
  108  docker ps -a
  109  docker images
  110  docker volume ls
  111  docker prune system
  112  docker system prune
  113  docker image prune
  114  docker container prune
  115  docker system prune
  116  docker ps
  117  docker ps -a
  118  docker images
  119  docker volume help
  120  docker volume test
  121  docker volume create test
  122  docker volume create prod
  123  docker volume prune
  124  docker volume ls
  125  history
  126  docker volume help
  127  history
============================================================================
25 SEP 25 



-----------------------------------------------

All these days amazonlinux 

use other images as well like ubuntu, centos ...etc 

export PS1='\u@\h# '


docker run -it -h <hostname>  iname 

-----------------------------------------------
FROM ubuntu:20.04
LABEL maintainer="MADHU KIRAN <devopstraininghub@gmail.com>" 
RUN apt-get update -y 
RUN apt-get install python3 python3-pip pip -y 
RUN pip install flask
COPY app.py /opt/python_webapp/app.py
CMD FLASK_APP=/opt/python_webapp/app.py flask run --host=0.0.0.0 --port=8080
EXPOSE 8080

----------------------------------------------
# Use an official lightweight Python image
FROM python:3.11-slim
LABEL maintainer="MADHU KIRAN <devopstraininghub@gmail.com>"

# Set working directory
WORKDIR /opt/python_webapp

# Copy the application code
COPY app.py .

# Install Flask
RUN pip install --no-cache-dir flask

# Expose the port your app runs on
EXPOSE 8080

# Run the application
CMD ["flask", "run", "--host=0.0.0.0", "--port=8080"]

----------------------------------------------

DOCKERFILE DEEP DIVE

FROM
RUN
COPY
CMD
EXPOSE 

ADD 

-----------
WORKDIR 
ADD 
COPY VS ADD 
----------
ENTRYPOINT 
CMD VS ENTRYPOINT 

===========
Dockerfile Instructions Simplified

RUN

    Executes commands while building the image.    
    Creates a new image layer.    
    Commonly used to install software packages
	it is basically during Image Building

CMD
    DURING CONTAINER CREATIING  -
    Sets the default command when the container starts.    
    Can be overridden by arguments passed to docker run.    


ENTRYPOINT
      
      Configures the container to run as an executable.      
      Cannot be fully overridden, but command-line arguments are appended.
	  GIven High priority 



==================================
TOMCAT SETUP 


FROM amazonlinux
LABEL maintainer="MADHU KIRAN <devopstraininghub@gmail.com>" 
RUN yum install java -y && yum install gzip tar -y 
WORKDIR /opt/tomcat
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.109/bin/apache-tomcat-9.0.109.tar.gz .
RUN tar -xvf apache-tomcat-9.0.109.tar.gz && rm -rf apache-tomcat-9.0.109.tar.gz

RUN sed -i 's/"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1"/".*"/g' /opt/tomcat/apache-tomcat-9.0.109/webapps/manager/META-INF/context.xml

WORKDIR /opt/tomcat/apache-tomcat-9.0.109/conf

RUN rm -rf tomcat-users.xml

RUN echo '<?xml version="1.0" encoding="utf-8"?> \
        <tomcat-users>  \
        <role rolename="manager-gui"/> \
        <user username="tomcat" password="tomcat" roles="manager-gui, manager-script, manager-status"/> \
        </tomcat-users>' > tomcat-users.xml

CMD ["/opt/tomcat/apache-tomcat-9.0.109/bin/catalina.sh" , "run"]
EXPOSE 8080




