=============================

IAM :

https://141559732042.signin.aws.amazon.com/console



ramani :

https://141559732042.signin.aws.amazon.com/console


admin acces 

{
    "Version": "2012-10-17",
    "Statement": [
        {
		    "Action": "*",
			"Resource": "*"
            "Effect": "Allow",
            
            
        }
    ]
}


===========================================
ec2-full access:

{
    "Version": "2012-10-17",
    "Statement": [
        {   
		    "Effect": "Allow",
            "Action": "ec2:*",            
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudwatch:*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "autoscaling:*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": [
                        "autoscaling.amazonaws.com",
                        "ec2scheduled.amazonaws.com",
                        "elasticloadbalancing.amazonaws.com",
                        "spot.amazonaws.com",
                        "spotfleet.amazonaws.com",
                        "transitgateway.amazonaws.com"
                    ]
                }
            }
        }
    ]
}


=====================================
read :

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:Describe*",
                "ec2:GetSecurityGroupsForVpc"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "elasticloadbalancing:Describe*",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:Describe*"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "autoscaling:Describe*",
            "Resource": "*"
        }
    ]
}



=================
EC2 -- START / STOP POLICY 

            "Effect": "Allow",
            "Action": "ec2: start & stop ", 
 			
            "Resource": "aws/region/instace-i-018fb757f8fbb8870"



{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances"
            ],
            "Resource": "arn:aws:ec2:us-east-1:141559732042:instance/i-018fb757f8fbb8870"
        }
    ]
}




arn:aws:ec2:us-east-1:141559732042:instance/i-018fb757f8fbb8870


===================================================

What is Amazon S3?
Amazon Simple Storage Service (S3) is a highly durable and scalable object storage service provided by AWS.

Designed for storing and retrieving any amount of data at any time from anywhere.


price: size (how much data you store)  , duration , storage class , which region 

S3 BUCKET 
OBJECT 
ACCESS - ACL 
S3 --> HOSTING STATIC WEBSITE 

STORAGE CLASSES 

==============================================================

AWS CLI :

aws --verion 

aws configure 

XXXXX6C5FA6Z4OURW
XXXXXXXXPoFGVmD/b+GVgik9/XXXXX


aws s3 cp /path/to/local/logs/ s3://your-log-bucket/logs/ --recursive

aws s3 cp s3://your-data-bucket/images/ /path/to/local/images/ --recursive


aws s3 sync /path/to/local/website/ s3://your-website-bucket/

aws s3 rb 

aws s3 rm 

====================
aws ec2 run-instances \
  --image-id ami-0150ccaf51ab55a51 \
  --count 1 \
  --instance-type t2.micro \
  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Instance}]'



==============
========

IAM ROLES :



====================================================================
RDS :

DATABASE SERVICES IN AWS :


------
Structured databases, also known as relational databases, store data in predefined schemas, usually in tables with rows and columns. 

These databases are characterized by their structured approach to storing and querying data, which involves predefined schemas and the use of SQL (Structured Query Language) to manage and manipulate the data.


Here are some examples:

MySQL:
    A widely-used open-source relational database management system (RDBMS) known for its speed, reliability, and ease of use. It's often used for web applications and supports SQL for querying data.

PostgreSQL:
    An advanced open-source RDBMS known for its robustness, extensibility, and compliance with SQL standards. It supports complex queries, foreign keys, triggers, and transactions.

Microsoft SQL Server: 
    A relational database management system developed by Microsoft. It's widely used in enterprise environments and integrates well with other Microsoft products like Azure, .NET, and Power BI.

Oracle Database: 
    A multi-model database management system produced by Oracle Corporation. It's known for its strong performance, scalability, and advanced features, making it popular in enterprise environments.

IBM Db2: 
    An RDBMS developed by IBM that is optimized for handling large volumes of data and complex queries. It supports a wide range of data types and is used in various industries, including finance and healthcare.

SQLite: 
    A lightweight, self-contained RDBMS that is embedded within applications. It's widely used in mobile applications, small desktop apps, and even some larger-scale web applications.

----------------------

Semi-structured databases store data that doesn't conform to a rigid schema like relational databases but still contains some organizational properties (such as tags or metadata) that make it easier to analyze. 

These databases are designed to handle data that doesn't fit neatly into the tables and columns of traditional relational databases, offering flexibility in how data is stored and queried.

Here are some examples of semi-structured databases:


MongoDB: 
   A NoSQL database that stores data in flexible, JSON-like documents. MongoDB allows for dynamic schema design, meaning fields can vary from document to document, which is ideal for applications with changing data requirements.

Apache Cassandra:
    A distributed NoSQL database designed to handle large amounts of data across many commodity servers. It uses a table-based structure but allows for varying column counts and types across rows, providing a level of flexibility not found in traditional relational databases.

Amazon DynamoDB: 
   A fully managed NoSQL database service provided by AWS. It stores data in a key-value format and is designed to scale horizontally with automatic partitioning and replication.

Google Cloud Datastore: 
    A NoSQL document database built for automatic scaling, high performance, and ease of application development. It is designed to support semi-structured data with nested fields and arrays.

OrientDB: 
    A multi-model database that supports graph, document, object, and key-value models. It can store semi-structured data with varying schema structures and relationships between data entities.

----------------------

Unstructured data, often referred to as NoSQL databases, are designed to handle data that doesn't fit into a predefined schema or structure. This type of data includes text, images, videos, and other forms of content that don't conform to the traditional tabular format. 


Here are some examples:

Elasticsearch:
    A distributed search and analytics engine that excels at indexing and searching large volumes of unstructured data, such as logs, documents, and textual content. It's commonly used for full-text search, log analysis, and real-time data exploration.

Apache Hadoop: 
     A framework that allows for the distributed processing of large data sets across clusters of computers. Itâ€™s often used for storing and processing unstructured data, like large text files, images, and videos, using its Hadoop Distributed File System (HDFS).

Apache Solr:
     A search platform built on Apache Lucene, designed for searching large volumes of unstructured text data. Solr is often used in applications that require full-text search, faceted search, and real-time indexing.

Amazon S3 (Simple Storage Service): 
     While not a database in the traditional sense, S3 is a scalable object storage service that allows you to store and retrieve any amount of data, including unstructured data like images, videos, and backups.

Microsoft Azure Blob Storage: 
       Similar to Amazon S3, Azure Blob Storage is designed to store large amounts of unstructured data, such as text or binary data. It's commonly used for serving images, documents, and media files to users.

Cassandra with Blob Data: 
      Apache Cassandra is primarily a semi-structured database, but it can also store unstructured data in the form of blobs (binary large objects), making it possible to store and retrieve files like images, videos, and audio directly from the database.

These tools and platforms are optimized for handling and processing data that doesn't have a clear structure or predefined schema, making them ideal for applications involving large, varied, and unstructured data sets.
